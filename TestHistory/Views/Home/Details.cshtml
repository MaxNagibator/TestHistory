@using TestHistory.Business
@model TestResult[]

@{
    var trs = Model;
}

@if (trs.Length == 0)
{
    return;
}
@{
    ViewData["Title"] = trs.First().PipeId;
}
<div class="main">
    <div class="primary">
        <div>
            <label>Ветка: @trs.First().Branch</label>
        </div>
        <div>
            <label>SHA: @trs.First().GetProperty("commitsha")</label>
        </div>
        <div>
            <label>@trs.First().GetProperty("committitle")</label>
        </div>
        <div id="GitlabContainer">
        </div>

        @*        @foreach (var prop in trs.First().Properties)
        {
        <div>
        <label>@prop.Key</label>
        <label>@prop.Value</label>
        </div>
        } *@
        @foreach (var trjbs in trs.GroupBy(x => x.JobId))
        {
            var jbprs = @trjbs.First().Properties;
            var jobName = jbprs.ContainsKey("jobname") ? jbprs["jobname"] : "-";
            <div class="test-result-job">
                <label class="job-name" onclick="clickTestResultJob(this)">
                    @jobName
                </label>
                @foreach (var tr in trjbs)
                {
                    var diff = (int)(DateTime.Parse(tr.RunResult.Times.Finish) - DateTime.Parse(tr.RunResult.Times.Start)).TotalSeconds;
                    var min = diff / 60;
                    var sec = diff % 60;
                    var counters = tr.RunResult.ResultSummary.Counters;
                    <span class="job-stat">
                        @* <label>@tr.RunResult.Name</label> *@
                        <span>t: @(min > 0 ? min + "m " : "")@(sec + "s")</span>
                        <span>
                            Total: <label>@counters.Executed</label>
                        </span>
                        <span>
                            Passed: <label>@counters.Passed</label>
                        </span>
                        <span>
                            Failed: <label>@(counters.Executed - counters.Passed)</label>
                        </span>
                        <span>
                            Others: <label>@(counters.Total - counters.Executed)</label>
                        </span>
                        <span>
                            Percent: <label>@(100 * (double)counters.Passed / counters.Executed)</label>
                        </span>
                    </span>
                    <div class="test-results-container">
                        @{
                            var runResults = tr.RunResult.Results.UnitTestResults.GroupBy(x => x.TestId, x => x);
                        }

                        @*     @foreach (var testDef in tr.RunResult.TestDefinitions.UnitTest.GroupBy(x => x.TestMethod.CodeBase).OrderBy(x=>x.Key))
                {
                var testDll = @testDef.First().TestMethod.CodeBase.Split('\\').Last();
                <label>@testDll</label>
                var testIds = testDef.Select(x => x.Id); *@
                        @foreach (var runResult in tr.RunResult.Results.UnitTestResults//.Where(x => testIds.Contains(x.TestId))
                       .OrderByDescending(x => x.Outcome == "Failed")
                       .ThenByDescending(x => x.Outcome == "Passed")
                       .ThenBy(x => x.TestName))
                        {
                            var output = "";
                            if (runResult.Output != null)
                            {
                                output = runResult.Output.StdOut;
                            }
                            var test = tr.RunResult.TestDefinitions.UnitTest.First(x => x.Id == runResult.TestId);
                            var testDll = test.TestMethod.CodeBase.Split('\\').Last();
                            //var test = testDef.First(x => x.Id == runResult.TestId);
                            <div class="test-result"
                                 data-output="@output"
                                 data-def-class="@(test.TestMethod.ClassName)"
                                 data-def-method="@(test.TestMethod.Name)"
                                 data-def-dll="@testDll"
                                 onclick="clickTest(this, event)">
                                <span>@runResult.Outcome</span>
                                <span>@test.Name</span>
                                <span>@runResult.Duration</span>
                            </div>
                        }
                        @*      } *@
                    </div>
                }
            </div>
        }


    </div>
    <div class="secondary">
        <div>Тут инфа</div>
    </div>
</div>

<script>
    function clickTest(elem) {
        let className = $(elem).data('def-class');
        let methodName = $(elem).data('def-method');
        let dllName = $(elem).data('def-dll');
        $('.secondary div').html(dllName + ' ' + className + ' ' + methodName);
        $('.main').addClass('details');
    }

    function clickTestResultJob(elem) {
        let container = $(elem).closest('.test-result-job');
        if ($(container).hasClass('show-test-results')) {
            $(container).removeClass('show-test-results');
        } else {
            $(container).addClass('show-test-results');
        }
    }
    document.addEventListener("DOMContentLoaded", function () {
        SendRequest({
            url: '/Home/GetDataFromGitlabPipe?pipeId=@(trs.First().PipeId)',
            method: 'GET',
            success: function (data) {
                $('#GitlabContainer').html(data.responseText);
            },
            error: function (data) {
                console.error(data);
            }
        });
    });
</script>

<style>
    .primary {
        width: 100%;
        display: inline-block;
    }

    .details .primary {
        width: 60%;
        display: inline-block;
    }

    .secondary {
        background-color: pink;
        display: none;
    }

    .details .secondary {
        width: 40%;
        display: block;
        vertical-align: top;
        position: fixed;
        top: 100px;
        height: 500px;
        right: 0;
    }

    .test-results-container {
        display: none;
    }

    .show-test-results .test-results-container {
        display: block;
    }

    .test-result {
        cursor: pointer;
    }

    .test-result-job {
        border: 1px solid gray;
        border-radius: 5px;
        margin: 2px;
    }

        .test-result-job .job-name {
            cursor: pointer;
            font-weight: bold;
        }

        .test-result-job .job-stat label {
            font-weight: bold;
        }
</style>
