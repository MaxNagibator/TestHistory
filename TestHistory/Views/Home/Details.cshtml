@using TestHistory.Business
@model TestResultGroup

@{
    var testResultGroup = Model;
}

@{
    var gitlabUrl = "https://gitlab.agroassist.ru/fullstack/web.agrohistoryv2";
    var pipeId = testResultGroup.PipeId;
    var branch = testResultGroup.Branch;
    var commitSHA = testResultGroup.CommitSha;
    var commitSHAshort = commitSHA != null && commitSHA.Length > 6 ? commitSHA.Substring(0, 6) : null;
    var commitTitle = testResultGroup.CommitTitle;
    var userName = testResultGroup.GitlabData?.User?.Name ?? "unknown";
    var userNickname = testResultGroup.GitlabData?.User?.Username ?? "unknown";
    var userAva = testResultGroup.GitlabData?.User?.AvatarUrl;
    ViewData["Title"] = pipeId;
}
<div class="main">
    <div class="primary">
        <h2>@commitTitle</h2>
        <div style="display: inline-block">
            <a href="@(gitlabUrl)/-/pipelines/@(pipeId)/test_report">
                <img src="/images/gitlab.png" class="gitlab-icon" />
            </a>
        </div>
        <div style="display: inline-block">
            <a href="@(gitlabUrl)/-/tree/@(branch)?ref_type=heads">@branch</a>
        </div>
        <div>
            @if (userAva != null)
            {
                <img src="@testResultGroup.GitlabData.User.AvatarUrl" style="border-radius: 25px; max-width: 50px; display: inline-block;" />
            }
            <label title="@userNickname">@userName</label> created for commit <a href="@(gitlabUrl)/-/commit/@(commitSHA)">@commitSHAshort</a>
        </div>
        <div>
        </div>

        @foreach (var trjbs in testResultGroup.TestResults.GroupBy(x => x.JobId))
        {
            var jobName = @trjbs.First().JobName ?? "-";
            <div>
                <label class="job-name">
                    @jobName:
                </label>
                @{
                    var runNumber = 0;
                }
                @foreach (var tr in trjbs.OrderBy(x => x.RunResult.Times.Start))
                {
                    runNumber++;
                    var diff = (int)(DateTime.Parse(tr.RunResult.Times.Finish) - DateTime.Parse(tr.RunResult.Times.Start)).TotalSeconds;
                    var min = diff / 60;
                    var sec = diff % 60;
                    var counters = tr.RunResult.ResultSummary.Counters;
                    <div class="test-result-job" data-test-result-id="@tr.Id">
                        <div onclick="clickTestResultJob(this)"
                             style="padding-left:5px;">
                            <label>run: @runNumber</label>
                            <span class="job-stat" data-id="@tr.Id">
                                @* <label>@tr.RunResult.Name</label> *@
                                <span>t: @(min > 0 ? min + "m " : "")@(sec + "s")</span>
                                <span>
                                    Total: <label>@counters.Executed</label>
                                </span>
                                <span>
                                    Passed: <label>@counters.Passed</label>
                                </span>
                                <span>
                                    Failed: <label>@(counters.Executed - counters.Passed)</label>
                                </span>
                                <span>
                                    Others: <label>@(counters.Total - counters.Executed)</label>
                                </span>
                                <span>
                                    @{
                                        var passPercent = 100 * (double)counters.Passed / counters.Executed;
                                        var passPercentText = Math.Round(passPercent, 2);
                                    }
                                    Percent: <label>@(passPercentText)</label>
                                </span>
                            </span>
                        </div>
                        <div class="test-results-container">
                            @{
                                var runResults = tr.RunResult.Results.UnitTestResults.GroupBy(x => x.TestId, x => x);
                            }

                            @*     @foreach (var testDef in tr.RunResult.TestDefinitions.UnitTest.GroupBy(x => x.TestMethod.CodeBase).OrderBy(x=>x.Key))
                    {
                    var testDll = @testDef.First().TestMethod.CodeBase.Split('\\').Last();
                    <label>@testDll</label>
                    var testIds = testDef.Select(x => x.Id); *@
                            @foreach (var runResult in tr.RunResult.Results.UnitTestResults//.Where(x => testIds.Contains(x.TestId))
                           .OrderByDescending(x => x.Outcome == "Failed")
                           .ThenByDescending(x => x.Outcome == "Passed")
                           .ThenBy(x => x.TestName))
                            {
                                var output = "";
                                if (runResult.Output != null)
                                {
                                    output = runResult.Output.StdOut;
                                }
                                var test = tr.RunResult.TestDefinitions.UnitTest.First(x => x.Id == runResult.TestId);
                                var testDll = test.TestMethod.CodeBase.Split('\\').Last();
                                //var test = testDef.First(x => x.Id == runResult.TestId);
                                var resultFilesPaths = runResult.ResultFiles?.List?.Select(x => x.Path).ToArray();
                                var resultFiles = resultFilesPaths != null && resultFilesPaths.Length > 0 ? string.Join(";", resultFilesPaths) : "";
                                <div class="test-result"
                                     data-output="@output"
                                     data-def-class="@(test.TestMethod.ClassName)"
                                     data-def-method="@(test.TestMethod.Name)"
                                     data-def-dll="@testDll"
                                     data-def-stdout="@(runResult.Output?.StdOut ?? "-")"
                                     data-def-error-message="@(runResult.Output?.ErrorInfo?.Message ?? "-")"
                                     data-def-error-stacktrace="@(runResult.Output?.ErrorInfo?.StackTrace ?? "-")"
                                     data-def-relative-result-dir="@(runResult.RelativeResultsDirectory)"
                                     data-def-result-files="@(resultFiles)"
                                     onclick="clickTest(this, event)">
                                    <span>
                                        @if (runResult.Outcome == "Failed")
                                        {
                                            <i class="fa fa-remove test-result-failed"></i>
                                        }
                                        else if (runResult.Outcome == "Passed")
                                        {
                                            <i class="fa fa-check test-result-passed"></i>
                                        }
                                        else if (runResult.Outcome == "NotExecuted")
                                        {
                                            <i class="fa fa-cancel test-result-not-executed"></i>
                                        }
                                        else
                                        {
                                            @runResult.Outcome
                                        }
                                    </span>
                                    <span>@test.Name</span>
                                    <span>@runResult.Duration</span>
                                </div>
                            }
                            @*      } *@
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    <div class="secondary" style="padding:5px;">
        <div class="test-name" style="font-weight:bold; font-size:18px">Тут инфа</div>
        <div class="test-class">Тут инфа</div>
        <div class="test-dll">Тут инфа</div>
        <div class="test-label" onclick="swap('test-stdout')">stdout:</div>
        <div class="test-block show-details test-stdout" style="white-space: pre-line;"></div>
        <div class="test-label" onclick="swap('test-error-message')">error message:</div>
        <div class="test-block show-details test-error-message">Тут инфа</div>
        <div class="test-label" onclick="swap('test-error-stack')">stack trace:</div>
        <div class="test-block show-details test-error-stack">Тут инфа</div>
        <div class="test-label" onclick="swap('test-result-files')">result files:</div>
        <div class="test-block show-details test-result-files"></div>
    </div>
    <div class="fullscreen hidden" onclick="closeFullScreen(this)">
    </div>
</div>

<script>
    function clickTest(elem) {
        let dllName = $(elem).data('def-dll');
        let className = $(elem).data('def-class');
        let methodName = $(elem).data('def-method');
        let stdout = $(elem).data('def-stdout');
        let errorMessage = $(elem).data('def-error-message');
        let errorStackTrace = $(elem).data('def-error-stacktrace');
        let resultFilesStr = $(elem).data('def-result-files');
        let relativeResultDir = $(elem).data('def-relative-result-dir');
        let testResultId = $(elem).closest('.test-result-job').data('test-result-id');
        $('.secondary .test-name').text(methodName);
        $('.secondary .test-class').text(className);
        $('.secondary .test-dll').text(dllName);
        $('.secondary .test-stdout').text(stdout);
        $('.secondary .test-error-message').text(errorMessage);
        $('.secondary .test-error-stack').text(errorStackTrace);
        $('.secondary .test-result-files').html('-');
        if (resultFilesStr != undefined && resultFilesStr != "") {
            console.log(resultFilesStr);
            let resultFiles = resultFilesStr.split(';');
            $('.secondary .test-error-files').text('');
            let out = "";
            for (let i = 0; i < resultFiles.length; i++) {
                let path = resultFiles[i];
                let pathSplit = path.split('\\');
                let name = pathSplit[pathSplit.length - 1];
                let fullPath = '/Files/' + testResultId + '/' + relativeResultDir + '/' + path;
                out += '<div class="result-file"><label data-path="' + fullPath + '" style="cursor:pointer;padding-right:10px;">' + name + '</label><a href="' + fullPath + '">скачать</a></div>';
            }
            $('.secondary .test-result-files').html(out);
            $('.secondary .result-file label').on('click', function () {
                let fullPath = $(this).data('path');
                $('.fullscreen').html('<img src="' + fullPath + '" style="width: 98%;margin: 1%; cursor:pointer;"> </img>');
                $('.fullscreen').removeClass('hidden');
            });
        }
        $('.main').addClass('details');
    }

    function swap(className) {
        let container = '.' + className;
        if ($(container).hasClass('show-details')) {
            $(container).removeClass('show-details');
        } else {
            $(container).addClass('show-details');
        }
    }

    function clickTestResultJob(elem) {
        let container = $(elem).closest('.test-result-job');
        if ($(container).hasClass('show-test-results')) {
            $(container).removeClass('show-test-results');
        } else {
            $(container).addClass('show-test-results');
        }
    }

    function closeFullScreen(elem) { 
        $(elem).addClass('hidden'); 
    }
    // document.addEventListener("DOMContentLoaded", function () {
    //     SendRequest({
    //         url: '/Home/GetDataFromGitlabPipe?pipeId=testResults.First().PipeId',
    //         method: 'GET',
    //         success: function (data) {
    //             $('#GitlabContainer').html(data.responseText);
    //         },
    //         error: function (data) {
    //             console.error(data);
    //         }
    //     });
    // });
</script>

<style>
    .primary {
        width: 100%;
        display: inline-block;
    }

    .details .primary {
        width: 60%;
        display: inline-block;
    }

    .secondary {
        background-color: lightblue;
        display: none;
        font-size: 14px;
        overflow: scroll;
    }

        .secondary div {
            white-space: pre-line;
        }

    .details .secondary {
        width: 40%;
        display: block;
        vertical-align: top;
        position: fixed;
        top: 100px;
        height: 80%;
        right: 0;
    }

    .test-results-container {
        display: none;
    }

    .show-test-results .test-results-container {
        display: block;
        padding-left: 5px;
    }

    .test-result {
        cursor: pointer;
    }

    .test-result-job {
        cursor: pointer;
        border: 1px solid gray;
        border-radius: 5px;
        margin: 2px;
    }

        .test-result-job .job-name {
            cursor: pointer;
            font-weight: bold;
        }

        .test-result-job .job-stat label {
            font-weight: bold;
        }

    .test-label {
        font-size: 20px;
        font-weight: bold;
        cursor: pointer;
        border: 1px solid black;
        margin-top: 5px;
        padding: 2px;
    }

    .test-block {
        display: none;
        border: 1px solid black;
        padding: 2px;
        margin-top: 1px;
    }

        .test-block.show-details {
            display: flex;
            overflow-y: hidden;
        }

    .test-result-not-executed {
        color: darkgray;
    }

    .test-result-passed {
        color: darkgreen;
    }

    .test-result-failed {
        color: darkred;
    }

    .fullscreen {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background: black;
    }
    .hidden{
        display: none;
    }
</style>
