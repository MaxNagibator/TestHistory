@using TestHistory.Business
@model TestResult[]

@{
    var trs = Model;
}

@if (trs.Length == 0)
{
    return;
}
@{
    ViewData["Title"] = trs.First().PipeId;
}
<div class="main">
    <div class="primary">
        @foreach (var prop in trs.First().Properties)
        {
            <div>
                <label>@prop.Key</label>
                <label>@prop.Value</label>
            </div>
        }
        @foreach (var trjbs in trs.GroupBy(x => x.JobId))
        {
            var jbprs = @trjbs.First().Properties;
            var jobName = jbprs.ContainsKey("jobname") ? jbprs["jobname"] : "-";
            <div class="test-result-job">
                <label>
                    @jobName
                </label>
                @foreach (var tr in trjbs)
                {
                    var diff = (int)(DateTime.Parse(tr.RunResult.Times.Finish) - DateTime.Parse(tr.RunResult.Times.Start)).TotalSeconds;
                    var min = diff / 60;
                    var sec = diff % 60;
                    var counters = tr.RunResult.ResultSummary.Counters;

                    @* <label>@tr.RunResult.Name</label> *@
                    <label>t: @(min > 0 ? min + "m " : "")@(sec + "s")</label>
                    <label>Total : @counters.Executed</label>
                    <label>Passed: @counters.Passed</label>
                    <label>Failed: @(counters.Executed - counters.Passed)</label>
                    <label>Others: @(counters.Total - counters.Executed)</label>
                    <label>percent: @(100 * (double)counters.Passed / counters.Executed)</label>

                    <div>
                        @{
                            var runResults = tr.RunResult.Results.UnitTestResults.GroupBy(x => x.TestId, x => x);
                        }

                        @*     @foreach (var testDef in tr.RunResult.TestDefinitions.UnitTest.GroupBy(x => x.TestMethod.CodeBase).OrderBy(x=>x.Key))
                {
                var testDll = @testDef.First().TestMethod.CodeBase.Split('\\').Last();
                <label>@testDll</label>
                var testIds = testDef.Select(x => x.Id); *@
                        @foreach (var runResult in tr.RunResult.Results.UnitTestResults//.Where(x => testIds.Contains(x.TestId))
                       .OrderByDescending(x => x.Outcome == "Failed")
                       .ThenByDescending(x => x.Outcome == "Passed")
                       .ThenBy(x => x.TestName))
                        {
                            var output = "";
                            if (runResult.Output != null)
                            {
                                output = runResult.Output.StdOut;
                            }
                            var test = tr.RunResult.TestDefinitions.UnitTest.First(x => x.Id == runResult.TestId);
                            var testDll = test.TestMethod.CodeBase.Split('\\').Last();
                            //var test = testDef.First(x => x.Id == runResult.TestId);
                            <div class="test-result"
                                 data-output="@output"
                                 data-def-class="@(test.TestMethod.ClassName)"
                                 data-def-method="@(test.TestMethod.Name)"
                                 data-def-dll="@testDll"
                                 onclick="clickTest(this)">
                                <span>@runResult.Outcome</span>
                                <span>@test.Name</span>
                                <span>@runResult.Duration</span>
                            </div>
                        }
                        @*      } *@
                    </div>
                }
            </div>
        }


    </div>
    <div class="secondary">
        <div>Тут инфа</div>
    </div>
</div>

<script>
    function clickTest(elem) {
        var className = $(elem).data('def-class');
        var methodName = $(elem).data('def-method');
        var dllName = $(elem).data('def-dll');
        $('.secondary div').html(dllName + ' ' + className + ' ' + methodName);
        $('.main').addClass('details');
    }
</script>

<style>
    .primary {
        width: 100%;
        display: inline-block;
    }

    .details .primary {
        width: 60%;
        display: inline-block;
    }

    .secondary {
        background-color: pink;
        display: none;
    }

    .details .secondary {
        width: 40%;
        display: block;
        vertical-align: top;
        position: fixed;
        top: 100px;
        height: 500px;
        right: 0;
    }

    .test-result {
        cursor: pointer;
    }

    .test-result-job {
    }

</style>
